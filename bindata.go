// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config.toml

package main


import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

// nolint: deadcode, gas
func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataConfigtoml = "\x23\x20\x4e\x61\x6e\x6f\x74\x61\x70\x20\x63\x6f\x6e\x66\x69\x67\x75\x72\x61\x74\x69\x6f\x6e\x20\x66\x69\x6c\x65" +
	"\x0a\x23\x20\x4c\x69\x6e\x65\x73\x20\x73\x74\x61\x72\x74\x69\x6e\x67\x20\x77\x69\x74\x68\x20\x27\x23\x27\x20\x61" +
	"\x72\x65\x20\x69\x67\x6e\x6f\x72\x65\x64\x0a\x23\x20\x43\x75\x73\x74\x6f\x6d\x69\x7a\x65\x20\x74\x6f\x20\x79\x6f" +
	"\x75\x72\x20\x6e\x65\x65\x64\x73\x0a\x0a\x23\x20\x50\x61\x74\x68\x20\x74\x6f\x20\x74\x68\x65\x20\x74\x6f\x75\x63" +
	"\x68\x73\x63\x72\x65\x65\x6e\x20\x69\x6e\x70\x75\x74\x20\x64\x65\x76\x69\x63\x65\x2e\x0a\x23\x20\x55\x73\x65\x20" +
	"\x22\x61\x75\x74\x6f\x22\x20\x74\x6f\x20\x61\x75\x74\x6f\x2d\x64\x65\x74\x65\x63\x74\x20\x28\x6d\x61\x79\x20\x6e" +
	"\x6f\x74\x20\x77\x6f\x72\x6b\x20\x66\x6f\x72\x20\x61\x6c\x6c\x20\x64\x65\x76\x69\x63\x65\x73\x29\x2e\x0a\x69\x6e" +
	"\x70\x75\x74\x20\x3d\x20\x22\x61\x75\x74\x6f\x22\x0a\x0a\x23\x20\x4d\x61\x78\x69\x6d\x75\x6d\x20\x6e\x75\x6d\x62" +
	"\x65\x72\x20\x6f\x66\x20\x66\x69\x6e\x67\x65\x72\x73\x20\x74\x6f\x20\x73\x75\x70\x70\x6f\x72\x74\x20\x74\x72\x61" +
	"\x63\x6b\x69\x6e\x67\x2e\x0a\x23\x20\x49\x66\x20\x79\x6f\x75\x20\x75\x73\x65\x20\x6d\x6f\x72\x65\x20\x74\x68\x61" +
	"\x6e\x20\x74\x68\x69\x73\x2c\x20\x61\x64\x64\x69\x74\x69\x6f\x6e\x61\x6c\x20\x66\x69\x6e\x67\x65\x72\x73\x20\x77" +
	"\x69\x6c\x6c\x20\x62\x65\x20\x69\x67\x6e\x6f\x72\x65\x64\x2e\x0a\x23\x20\x31\x30\x20\x69\x73\x20\x61\x20\x73\x61" +
	"\x66\x65\x20\x76\x61\x6c\x75\x65\x20\x61\x73\x20\x61\x6c\x6d\x6f\x73\x74\x20\x6e\x6f\x20\x74\x6f\x75\x63\x68\x73" +
	"\x63\x72\x65\x65\x6e\x73\x20\x63\x61\x6e\x20\x72\x65\x63\x6f\x67\x6e\x69\x7a\x65\x20\x6d\x6f\x72\x65\x2e\x0a\x6d" +
	"\x61\x78\x5f\x66\x69\x6e\x67\x65\x72\x73\x20\x3d\x20\x31\x30\x0a\x0a\x23\x20\x45\x6e\x64\x20\x6f\x66\x20\x4e\x61" +
	"\x6e\x6f\x74\x61\x70\x20\x63\x6f\x6e\x66\x69\x67\x75\x72\x61\x74\x69\x6f\x6e\x20\x66\x69\x6c\x65\x0a"

func bindataConfigtomlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigtoml,
		"config.toml",
	)
}



func bindataConfigtoml() (*asset, error) {
	bytes, err := bindataConfigtomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "config.toml",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"config.toml": bindataConfigtoml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"config.toml": {Func: bindataConfigtoml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
